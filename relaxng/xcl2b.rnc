default namespace = "http://iso-commonlogic.org/xcl2"
## Common Logic Syntax XCL2 (Draft)
start = root
root = Corpus | cltext | statement | sentence

## Corpora 
Corpus = element Corpus { Corpus.type }
Corpus.type = common, root*

## Texts
cltext = Construct | Restrict | Import

##    -Text Constructions 
Construct = element Construct { Construct.type }
Construct.type = common, (cltext | statement | sentence)*

##    -Domain Restrictions 
Restrict = element Restrict { Restrict.type }
Restrict.type = common, term, (cltext | statement | sentence)

##    -Imports 
Import = element Import { Import.type }
Import.type = common, Name

## Statements
statement = In | Out | Titling

##    -Discourse Statements 
In = element In { Discourse.type }
Out = element Out { Discourse.type }
Discourse.type = common, Name+

##    -Text Titlings 
Titling = element Titling { Titling.type }
Titling.type = common, Name, cltext

## Sentences
sentence =
  Atom
  | Equal
  | And
  | Or
  | Not
  | Implies
  | Equivalent
  | Forall
  | Exists

##    -Atomic Formulas 
Atom = element Atom { Atom.type }
Atom.type = common, term, termSequence

##    -Equals 
Equal = element Equal { Equal.type }
Equal.type = common, term, term

##    -Connectives 
And = element And { AndOr.type }
Or = element Or { AndOr.type }
AndOr.type = common, sentence*
Not = element Not { Not.type }
Not.type = common, sentence
Implies = element Implies { Implies.type }
Implies.type = common, sentence, sentence
Equivalent = element Equivalent { Equivalent.type }
Equivalent.type = common, sentence, sentence

##    -Quantifications 
Forall = element Forall { Quantifier.type }
Exists = element Exists { Quantifier.type }
Quantifier.type = common, Name+, sentence

## Term Sequences 
termSequence = (term | Mark)*

## Terms 
term = Apply | Name | Data

##    -Functional Terms 
Apply = element Apply { Apply.type }
Apply.type = common, term, termSequence

##    -Names 
Name = element Name { Name.type }
Name.type = 
  (common, type*, (cri.attrib | symbol)) | 
  (key.attrib?, (text & anyElement*))
symbol = element symbol {  symbol.type }
symbol.type = (text & anyElement*)
type = element type{ type.type }
type.type = Name
cri.attrib = attribute cri { curieOrAbsIRI.datatype }

##    -Data
Data = element Data { Data.type }
Data.type = 
  (common, symbol-data) | 
  (key.attrib?, datatype.attrib?, (text & anyElement*))
symbol-data = element symbol { symbol-data.type }
symbol-data.type = datatype.attrib?,  (text & anyElement*)
datatype.attrib = attribute datatype { curieOrAbsIRI.datatype }

## Sequence Markers 
Mark = element Mark { Mark.type }
Mark.type = 
  (common, symbol) | 
  (key.attrib?, (text & anyElement*)) 

## The common pattern: Prefixes, Comments, Keys
common = key.attrib?, prefixDeclaration*, Comment?
prefixDeclaration = element prefix { pre.attrib, iri.attrib }
pre.attrib = attribute pre { prefix.datatype }
prefix.datatype = xsd:NCName?
Comment = element Comment { attribute * { text }*, (text & anyElement*) }
iri.attrib = attribute iri { absIRI.datatype }
key.attrib = attribute key { curieOrAbsIRI.datatype }
curieOrAbsIRI.datatype = curie.datatype | absIRI.datatype
curie.datatype =  xsd:string { minLength = "1" pattern = "(([\i-[:]][\c-[:]]*)?:)?.*"}
absIRI.datatype = xsd:anyURI { pattern = "[\i-[:]][\c-[:]]*:.*" }
anyElement =
  element * {
    attribute * { text }*,
    (text & anyElement*)
  }
