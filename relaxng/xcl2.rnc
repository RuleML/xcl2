default namespace = "http://iso-commonlogic.org/xcl2"
## Common Logic Syntax XCL2 (Draft)
start = ExpressionsPlus
ExpressionsPlus = Corpus | textCategory | statement | sentence

## Corpora 
Corpus = element Corpus { Corpus.type }
Corpus.type = common, (ExpressionsPlus)*

## Texts
textCategory = TextConstruction | DomainRestriction | Importation

##    -Text Constructions 
TextConstruction = element TextConstruction { TextConstruction.type }
TextConstruction.type = common, (textCategory | statement | sentence)*

##    -Domain Restrictions 
DomainRestriction = element DomainRestriction { DomainRestriction.type }
DomainRestriction.type = common, term, textCategory

##    -Importations 
Importation = element Importation { Importation.type }
Importation.type = common, Name

## Statements
statement = InDiscourse | OutDiscourse | Titling

##    -Discourse Statements 
InDiscourse = element InDiscourse { Discourse.type }
OutDiscourse = element OutDiscourse { Discourse.type }
Discourse.type = common, Name+

##    -Text Titlings 
Titling = element Titling { Titling.type }
Titling.type = common, Name, textCategory

## Sentences
sentence =
  Atom
  | Equation
  | Conjunction
  | Disjunction
  | Negation
  | Implication
  | Biconditional
  | Universal
  | Existential

##    -Atomic Formulas 
Atom = element Atom { Atom.type }
Atom.type = common, term, termSequence

##    -Equations 
Equation = element Equation { Equation.type }
Equation.type = common, term, term

##    -Connectives 
Conjunction = element Conjunction { Junction.type }
Disjunction = element Disjunction { Junction.type }
Junction.type = common, sentence*
Negation = element Negation { Negation.type }
Negation.type = common, sentence
Implication = element Implication { Implication.type }
Biconditional = element Biconditional { Implication.type }
Implication.type = common, sentence, sentence

##    -Quantifications 
Universal = element Universal { Quantifier.type }
Existential = element Existential { Quantifier.type }
Quantifier.type = common, Name+, sentence

## Term Sequences 
termSequence = (term | SequenceMarker)*

## Terms 
term = FunctionalTerm | Name | Data

##    -Functional Terms 
FunctionalTerm = element FunctionalTerm { FunctionalTerm.type }
FunctionalTerm.type = common, term, termSequence

##    -Names 
Name = element Name { Name.type }
Name.type = 
  (common, type*, (cri.attrib | symbol)) | 
  (key.attrib?, (text & anyElement*))
symbol = element symbol {  symbol.type }
symbol.type = (text & anyElement*)
type = element type{ type.type }
type.type = Name
cri.attrib = attribute cri { curieOrAbsIRI.datatype }

##    -Data
Data = element Data { Data.type }
Data.type = 
  (common, symbol-data) | 
  (key.attrib?, datatype.attrib?, (text & anyElement*))
symbol-data = element symbol { symbol-data.type }
symbol-data.type = datatype.attrib?,  (text & anyElement*)
datatype.attrib = attribute datatype { curieOrAbsIRI.datatype }

## Sequence Markers 
SequenceMarker = element SequenceMarker { SequenceMarker.type }
SequenceMarker.type = 
  (common, symbol) | 
  (key.attrib?, (text & anyElement*)) 

## The common pattern: Prefixes, Comments, Keys
common = key.attrib?, prefixDeclaration*, Comment?
prefixDeclaration = element prefix { pre.attrib, cri.attrib }
pre.attrib = attribute pre { prefix.datatype }
prefix.datatype = xsd:NCName
Comment = element Comment { common, (text & anyElement*) }
key.attrib = attribute key { curieOrAbsIRI.datatype }
curieOrAbsIRI.datatype = curie.datatype | absIRI.datatype
curie.datatype =  xsd:string { minLength = "1" pattern = "(([\i-[:]][\c-[:]]*)?:)?.*"}
absIRI.datatype = xsd:anyURI { pattern = "[\i-[:]][\c-[:]]*:.*" }
anyElement =
  element * {
    attribute * { text }*,
    (text & anyElement*)
  }
